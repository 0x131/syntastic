#!/usr/bin/env node

/*
CoffeeLint

Copyright (c) 2011 Matthew Perpick.
CoffeeLint is freely distributable under the MIT license.
*/

(function() {
  var coffeelint, colorize, configPath, fs, lint, optimist, options, path, paths, read, reportError, reportSuccess, returnCode, stylize, thisdir;

  path = require("path");

  fs = require("fs");

  optimist = require("optimist");

  thisdir = path.dirname(fs.realpathSync(__filename));

  coffeelint = require(path.join(thisdir, "..", "lib", "coffeelint"));

  stylize = function(message, styles) {
    var map;
    map = {
      bold: [1, 22],
      yellow: [33, 39],
      green: [32, 39],
      red: [31, 39]
    };
    return styles.reduce(function(m, style) {
      return "\u001b[" + map[style][0] + "m" + m + "\u001b[" + map[style][1] + "m";
    }, message);
  };

  reportError = function(path, error, colorize) {
    var fields;
    fields = [path + "#" + error.lineNumber, error.level, error.message];
    if (error.context) fields.push(error.context);
    return console.warn(fields.join(" : "));
  };

  reportSuccess = function(message, colorize) {
    if (colorize) message = stylize(message, ["bold", "green"]);
    return console.log(message);
  };

  read = function(path) {
    var realPath;
    realPath = fs.realpathSync(path);
    return fs.readFileSync(realPath).toString();
  };

  lint = function(paths, configPath, colorize) {
    var config, foundError, foundWarning;
    config = (configPath ? JSON.parse(read(configPath)) : {});
    foundError = false;
    foundWarning = false;
    paths.forEach(function(path) {
      var source;
      source = read(path);
      return coffeelint.lint(source, config).forEach(function(error) {
        reportError(path, error);
        foundError = foundError || error.level === "error";
        return foundWarning = foundWarning || error.level === "warn";
      });
    });
    if (!foundError && !foundWarning) reportSuccess("Lint free!", colorize);
    if (foundError) {
      return 1;
    } else {
      return 0;
    }
  };

  options = optimist.usage("Usage: coffeelint [options] source [...]").alias("f", "file").alias("h", "help").alias("v", "version").describe("f", "Specify a custom configuration file.").describe("h", "Print help information.").describe("v", "Print current version number.").describe("nocolor", "Don't colorize output.").boolean("nocolor");

  if (options.argv.v) {
    console.log(coffeelint.VERSION);
    process.exit(0);
  } else if (options.argv.h) {
    options.showHelp();
    process.exit(0);
  } else if (options.argv._.length < 1) {
    options.showHelp();
    process.exit(1);
  } else {
    paths = options.argv._;
    configPath = options.argv.f;
    colorize = !options.argv.nocolor;
    returnCode = lint(paths, configPath, colorize);
    process.exit(returnCode);
  }

}).call(this);
