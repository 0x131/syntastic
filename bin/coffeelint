#!/usr/bin/env node

// Require dependencies.
var path = require('path');
var fs = require('fs');
var optimist = require ('optimist');

// Require our library.
var thisdir = path.dirname(fs.realpathSync(__filename));
var coffeelint = require(path.join(thisdir, '../lib', 'coffeelint'));


// Print a report on the given errors.
var report = function (path, errors) {
    var messages = errors.map(function (error) {
        var fields = [
            path,
            "Line #" + error.line,
            error.reason
        ];
        if (error.evidence) {
            fields.push(error.evidence)
        }
        return fields.join(" | ");
    });

    messages.forEach(function (msg) {
        console.warn(msg);
    });

    return errors.length;
};

// Return the contents of the relative file.
var read = function (path) {
    var realPath = fs.realpathSync(path);
    return fs.readFileSync(realPath).toString();
};

// Lint the given source files with the given configuration. Return 0
// on success, false otherwise.
var lint = function (paths, configPath) {

    var config = (configPath) ? JSON.parse(read(configPath)) : {};

    var returnCode = 0;
    paths.map(function (path) {
        return [path, read(path)];
    }).forEach(function (script) {

        var path = script[0];
        var source = script[1];

        var errors = coffeelint.lint(source, config);
        if (errors.length) {
            report(path, errors);
            returnCode = 1;
        }
    });

    if (returnCode === 0) {
        console.log('Lint free!');
    }
    return returnCode;
};


// Declare command line options.
var optimist = require('optimist')
    .usage('Usage: coffeelint [options] source [...]')
    .alias('f', 'file')
    .alias('h', 'help')
    .alias('v', 'version')
    .describe('f', 'Specify a custom configuration file.')
    .describe('h', 'Print help information.')
    .describe('v', 'Print current version number.');


if (optimist.argv.v) {
    console.log(coffeelint.VERSION);
    process.exit(0);
} else if (optimist.argv.h) {
    optimist.showHelp();
    process.exit(0);
} else if (optimist.argv._.length < 1) {
    optimist.showHelp();
    process.exit(1);
} else {
    var paths = optimist.argv._;
    var configPath = optimist.argv.f;
    var returnCode = lint(paths, configPath);
    process.exit(returnCode);
}
